apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: kerberos
spec:
  bindings:
  - name: relam
    value: KUBEDOOP.DEV # should be uppercase, must be the same as the realm in krb5.conf
  - name: kadminPassword
    value: kubedoopdev
  - name: kadminKeytabSecret
    value: kadmin-keytab
  steps:
  - try:
    - assert:
        file: secretcsi-assert.yaml
  - try:  # deploy kerberos
    - apply:  # create a krb5 deployment and service, both named "krb5"
        file: krb5.yaml
    - assert:
        file: krb5-assert.yaml
    cleanup:
    - sleep:
        duration: 10s

  - try:  # deploy krb5 SecretClass
    - script:
        env:
        - name: RELAM
          value: ($relam)
        - name: NAMESPACE
          value: ($namespace)
        - name: DEPLOYMENT_NAME
          value: krb5
        - name: KADMIN_KEYTAB_SECRET
          value: ($kadminKeytabSecret)
        content: |
          # debug node info
          kubectl get node
          # get pod of deploment by label
          POD_NAME=$(kubectl get pod -n $NAMESPACE -l app=$DEPLOYMENT_NAME -o jsonpath="{.items[0].metadata.name}")

          # check pod exist
          if [ -z "$POD_NAME" ]; then
            echo "pod not found"
            exit 1
          fi

          # get kadmin keytab
          KADMIN_KEYTAB=$(kubectl exec -n $NAMESPACE $POD_NAME -- sh -c "cat /var/kerberos/krb5kdc/kadmin.keytab | base64 -w 0")

          # create secret, name is $KADMIN_KEYTAB_SECRET
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: $KADMIN_KEYTAB_SECRET
            namespace: $NAMESPACE
          data:
            keytab: $KADMIN_KEYTAB
    - assert: # assert kadmin keytab secret
        resource:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ($kadminKeytabSecret)
          data:
            (keytab != ""): true
    - apply:
        resource:
          apiVersion: secrets.kubedoop.dev/v1alpha1
          kind: SecretClass
          metadata:
            name: kerberos
          spec:
            backend:
              kerberosKeytab:
                realmName: ($relam)
                kdc: (join('.', ['krb5', ($namespace), 'svc.cluster.local']))
                adminServer:
                  mit:
                    kadminServer: (join('.', ['krb5', ($namespace), 'svc.cluster.local']))
                adminKeytabSecret:
                  name: ($kadminKeytabSecret)
                  namespace: ($namespace)
                adminPrincipal: (join('', ['admin/admin@', ($relam)]))
  - try:
    - apply:
        file: node-scope.yaml
    - assert:
        file: node-scope-assert.yaml
    catch:
      - script:
          env:
            - name: NAMESPACE
              value: ($namespace)
          content: |
            kubectl -n "$NAMESPACE" get pod
            kubectl -n "$NAMESPACE" describe pod
  - try:
    - apply:
        file: service-scope.yaml
    - assert:
        file: service-scope-assert.yaml
  - try:
    - apply:
        file: pod-scope.yaml
    - assert:
        file: pod-scope-assert.yaml
