{{- if .Values.postInstall.checkDaemonSet.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "operator.fullname" . }}-ds-check
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "operator.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: {{ .Values.postInstall.checkDaemonSet.backoffLimit | default 6 }}
  ttlSecondsAfterFinished: {{ .Values.postInstall.checkDaemonSet.ttlSecondsAfterFinished | default 100 }}
  template:
    metadata:
      labels:
        {{- include "operator.labels" . | nindent 8 }}
        app.kubernetes.io/component: daemonset-readiness-check
    spec:
      serviceAccountName: {{ include "operator.fullname" . }}-ds-check
      restartPolicy: OnFailure
      containers:
      - name: kubectl
        image: {{ .Values.postInstall.checkDaemonSet.image | default "quay.io/zncdatadev/tools:1.0.0-kubedoop0.0.0-dev" }}
        resources:
          {{- toYaml .Values.postInstall.checkDaemonSet.resources | nindent 10 }}
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking DaemonSet status..."
          ATTEMPTS={{ .Values.postInstall.checkDaemonSet.attempts | default 30 }}
          SLEEP_TIME={{ .Values.postInstall.checkDaemonSet.sleepTime | default 10 }}
          MIN_NODES={{ .Values.postInstall.checkDaemonSet.minAvailableNodes | default 0 }}

          DS_NAME="{{ include "operator.fullname" . }}-daemonset"
          NAMESPACE="{{ .Release.Namespace }}"

          echo "Looking for DaemonSet: $DS_NAME in namespace: $NAMESPACE"
          echo "Minimum required available nodes: $MIN_NODES"

          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempt $i of $ATTEMPTS"

            # check if the DaemonSet exists
            if kubectl get daemonset -n "$NAMESPACE" "$DS_NAME" &>/dev/null; then
              echo "Found DaemonSet $DS_NAME in namespace $NAMESPACE"

              # print the DaemonSet status
              kubectl get daemonset $DS_NAME -n $NAMESPACE

              # check if the DaemonSet is ready
              DESIRED=$(kubectl get daemonset $DS_NAME -n $NAMESPACE -o jsonpath='{.status.desiredNumberScheduled}' 2>/dev/null)
              READY=$(kubectl get daemonset $DS_NAME -n $NAMESPACE -o jsonpath='{.status.numberReady}' 2>/dev/null)

              DESIRED=${DESIRED:-0}
              READY=${READY:-0}

              echo "Desired: $DESIRED, Ready: $READY, Minimum Required: $MIN_NODES"

              # If minAvailableNodes is set to 0, use the regular check for all nodes to be ready
              # Otherwise, check if the number of ready nodes meets the minimum requirement
              if [ "$MIN_NODES" -gt 0 ]; then
                if [ "$READY" -ge "$MIN_NODES" ]; then
                  echo "DaemonSet has at least $MIN_NODES nodes ready!"
                  exit 0
                fi
              elif [ "$DESIRED" -eq "$READY" ] && [ "$DESIRED" -gt 0 ]; then
                echo "All DaemonSet pods are ready!"
                exit 0
              fi
            else
              echo "DaemonSet $DS_NAME not found in namespace $NAMESPACE"

              # print all DaemonSets in the namespace
              echo "Available DaemonSets in namespace $NAMESPACE:"
              kubectl get daemonset -n $NAMESPACE
            fi

            echo "Waiting for DaemonSet to be ready..."
            sleep $SLEEP_TIME
          done

          echo "DaemonSet did not become ready within the expected time"
          exit 1
      {{- with .Values.postInstall.checkDaemonSet.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postInstall.checkDaemonSet.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
